%%
% extracts event rates, durations and start times from a given naive
% participation rate array.
%   Input:   parRates - naive participation rates as generated by
%                                                    get_ParRates
%            rateThresh - threshold for participation to recognize an event
%            diffThresh - threshold for rate of change of participation to
%                                                         recognize an event
%            windowSize - maximal size of window in which events are
%                                                         considered
%   Output:  evRates - array of event participation rates
%            evDurations - array of event durations
%            evStartTime - array of event starting times
%
function  [evRates , evDurations ,evDurationsFWHM , evStartTime] = get_evRates(raster , parRates , rateThresh , diffThresh , windowSize , duds, params)
    % Set constants
    minSize = 3; IDBOUND = 10;
    N = size(raster,2);
    % Define yero-crossing handle
    zci = @(v) find(v(:).*circshift(v(:), [-1 0]) <= 0);% Returns Zero-Crossing Indices Of Argument Vector

    % Determine 'spikes' in participation rate
    % smooth and renormalize so that thresholds apply
    spR = smoothdata(parRates);
    spR = spR*(max(parRates)/max(spR));
    dspR = diff(spR);
    dspR = dspR*(max(diff(parRates))/max(dspR));
    % detect events by looking at threshold and positive change
    evDetectMask = (spR > rateThresh) .* [dspR  > diffThresh 0];
    evStartTime = find(evDetectMask);
    if isempty(evStartTime)
        evRates = [];evDurations = []; evDurationsFWHM=[]; evStartTime=[]; return
    end
    % aggregate them so that events are detected only once
    evAggStartTime = [evStartTime(1)];
    for ii = 2:length(evStartTime)
        if not( abs(evStartTime(ii) - evStartTime(ii-1)) < IDBOUND)
            evAggStartTime = [evAggStartTime evStartTime(ii)];
        end
    end
    evStartTime = evAggStartTime;
    % initialize arrays
    evDurations = zeros(length(evStartTime),1);
    evDurationsFWHM = zeros(length(evStartTime),1);
    evRates = zeros(length(evStartTime),1);
    for ii = 1:length(evStartTime)
        % the duration of an event is either until the end of the recording
        % or until the naive participation rate drops below rateThresh 
        if evStartTime(ii)+windowSize > length(parRates)
            evDurations(ii) = length(parRates) - evStartTime(ii);
            evDurationsFWHM(ii) = NaN;
        else
            % look at maximum window size initially
            dPr = dspR(evStartTime(ii)+minSize-1:evStartTime(ii)+windowSize-1);%diff(parRates(evStartTime(ii)+minSize:evStartTime(ii)+windowSize));
            pr  = spR(evStartTime(ii)+minSize:evStartTime(ii)+windowSize);%parRates(evStartTime(ii)+minSize:evStartTime(ii)+windowSize);
            % find potential ends with negative rate of change
            idx = find( (pr <= params.endEventPR*rateThresh) .* (dPr < 0)) + minSize;
            if isempty(idx)
                idx = zci(dPr);
                %[~,idx] = find(dPr <= -diffThresh) + 1;
                %idx =idx + 1;
            end
            if isempty(idx)
                evDurations(ii)  = windowSize ;
                evDurationsFWHM(ii) = NaN;
            else
                eIDX = find(diff(idx)~=1);
                if ~isempty(eIDX)
                    evDurations(ii) = idx(eIDX(1));
                else
                    evDurations(ii) = idx(end);
                end
                tmp = zci(pr - (min(pr)+max(pr))/2);
                if pr(tmp(1)) >= pr(1)
                    evDurationsFWHM(ii) = tmp(end)-tmp(1);
                else
                    evDurationsFWHM(ii) = tmp(1)-1;
                end
            end
        end
        % the participation rate of an event is defined as the maximal
        % naive participation rate during the duration
        try
        window = transp(raster(evStartTime(ii):evStartTime(ii)+evDurations(ii),:));
        catch
           window = transp(raster(evStartTime(ii):end,:)); 
        end
        parWindow = sum(window,2) > 0 ;
        %ParRate = [ParRate , sum(parWindow)/(N-duds)];
        
        evRates(ii) = sum(parWindow)/(N-duds);%max(parRates(evStartTime(ii):evStartTime(ii)+evDurations(ii)));
    end
end
